addTiles() %>%
setView(-97,39, zoom = 3) %>%
addPolygons(
fillColor = ~pal(gdp),
weight = 1,
dashArray = "3",
color = "black",
fillOpacity = 2,
highlight = highlightOptions(
weight = 5,
color = "#999",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%  addLegend(
pal = pal,
title = "Percent of GDP Growth (2017)",
values = gdp,
labFormat = labelFormat(suffix = "%", between = " to "),
position = "bottomleft",
opacity = 2)
#GDP map of the US
leaflet(states) %>%
addTiles() %>%
setView(-97,39, zoom = 3) %>%
addPolygons(
fillColor = ~pal(gdp),
weight = 1,
dashArray = "3",
color = "black",
fillOpacity = 2,
highlight = highlightOptions(
weight = 5,
color = "#999",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%  addLegend(
pal = pal,
title = "Percent of GDP Growth (2017)",
values = gdp,
labFormat = labelFormat(suffix = "%", between = " to "),
position = "bottomleft",
opacity = 2)
#GDP map of the US
leaflet(states) %>%
addTiles() %>%
setView(-97,39, zoom = 3) %>%
addPolygons(
fillColor = ~pal(gdp),
weight = 1,
dashArray = "3",
color = "black",
fillOpacity = 2,
highlight = highlightOptions(
weight = 5,
color = "#999",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%  addLegend(
pal = pal,
title = "Percent of GDP Growth (2017)",
values = gdp,
labFormat = labelFormat(suffix = "%", between = " to "),
position = "bottomleft",
opacity = 2)
left_over  = data.frame(state = c("District of Columnbia","Puerto Rico"), gdp_2017 = c(0,0))
gdp = rbind(gdp,left_over)
#Creates levels to match with the states json
levels = states$NAME
rearranged_gdp <- as.data.frame(gdp %>% mutate(
state = factor(state, levels = levels)) %>%
arrange(state)
)
#Adds another column
states@data = states@data %>% mutate(gdp = rearranged_gdp$gdp_2017)
#Bins for the map ranging from -2 to 5 incremented by 1
bins <- seq(-2,5,1)
pal <- colorBin(palette = "RdYlGn", domain = states@data$gdp, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g percent",
states@data$NAME, states@data$gdp
) %>% lapply(htmltools::HTML)
states <- geojson_read("dataset/us-states.json", what = "sp")
gdp_2017  = read_xlsx("dataset/qgdpstate0219.xlsx")
#Temporaily rename columns
colnames(gdp_2017) = letters[1:10]
#Takes the rows that are states
#Takes the first two columns and renames to state and gdp_2017
gdp = gdp_2017[gdp_2017$a %in% state.name,] %>%
select(a,b) %>%
rename(
"state" = a,
"gdp_2017" = b
)
#Adds in District of Columbia and Puerto Rico rows
left_over  = data.frame(state = c("District of Columnbia","Puerto Rico"), gdp_2017 = c(0,0))
gdp = rbind(gdp,left_over)
#Creates levels to match with the states json
levels = states$NAME
rearranged_gdp <- as.data.frame(gdp %>% mutate(
state = factor(state, levels = levels)) %>%
arrange(state)
)
#Adds another column
states@data = states@data %>% mutate(gdp = rearranged_gdp$gdp_2017)
#Bins for the map ranging from -2 to 5 incremented by 1
bins <- seq(-2,5,1)
pal <- colorBin(palette = "RdYlGn", domain = states@data$gdp, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g percent",
states@data$NAME, states@data$gdp
) %>% lapply(htmltools::HTML)
#GDP map of the US
leaflet(states) %>%
addTiles() %>%
setView(-97,39, zoom = 3) %>%
addPolygons(
fillColor = ~pal(gdp),
weight = 1,
dashArray = "3",
color = "black",
fillOpacity = 2,
highlight = highlightOptions(
weight = 5,
color = "#999",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%  addLegend(
pal = pal,
title = "Percent of GDP Growth (2017)",
values = gdp,
labFormat = labelFormat(suffix = "%", between = " to "),
position = "bottomleft",
opacity = 2)
summary(national_vs_states_df[4:11])
ggplot(data = nat_vs_WA_CT_wage) +
geom_boxplot(mapping = aes(
x = state,
y = wage
))
library(shiny); runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
library('geojson')
library("geojsonio")
library("leaflet")
library("readxl")
library("dplyr")
library("tidyr")
library("ggplot2")
options(scipen = 999)
kelly_server <- function(input, output){
states <- geojson_read("dataset/us-states.json", what = "sp")
gdp_2017  = read_xlsx("dataset/qgdpstate0219.xlsx")
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx")
#Temporaily rename columns
colnames(gdp_2017) <- letters[1:10]
#Takes the rows that are states
#Takes the first two columns and renames to state and gdp_2017
gdp <- gdp_2017[gdp_2017$a %in% state.name,] %>% select(a,b) %>%
rename("state" = a,"gdp_2017" = b)
#Adds in District of Columbia and Puerto Rico rows to the gdp dataframe
left_over <- data.frame(state = c("District of Columnbia","Puerto Rico"), gdp_2017 = c(0,0))
gdp = rbind(gdp,left_over)
state_df[7:23] <- lapply(state_df[7:23], as.numeric)
states_summarized <- state_df %>%
group_by(STATE) %>% summarize(
avg_hour_wage = round(mean(H_MEAN, na.rm = TRUE), 2),
avg_total_employee = round(mean(TOT_EMP, na.rm = TRUE), 2)
) %>%
filter(STATE !=  "Guam" & STATE != "Virgin Islands")
#Creates levels to match with the states json
levels = states$NAME
rearranged_states_summarized <- as.data.frame(states_summarized %>% mutate(
state = factor(STATE, levels = levels)) %>%
arrange(state))
rearranged_gdp <- as.data.frame(gdp %>% mutate(
state = factor(state, levels = levels)) %>%
arrange(state)
)
#Adds another column
states@data = states@data %>% mutate(gdp = rearranged_gdp$gdp_2017,
hourly_wage = rearranged_states_summarized$avg_hour_wage,
total_employee = rearranged_states_summarized$avg_total_employee)
output$map <- renderLeaflet({
if(input$map_value == "gdp"){
bins <- seq(-2,5,1)
pal <- colorBin(palette = "RdYlGn", domain = states@data$gdp, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g percent",
states@data$NAME, states@data$gdp
) %>% lapply(htmltools::HTML)
map_title <- "Percent of GDP Growth (2017)"
map_value <- states@data$gdp
}
else if(input$map_value == "wage"){
bins <- seq(16,36, length.out = 7)
pal <- colorBin(palette = "PuBuGn", domain = states@data$hourly_wage, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>$%g/hr",
states@data$NAME, states@data$hourly_wage
) %>% lapply(htmltools::HTML)
map_title <- "Hourly Wages in USD (2017)"
map_value <- states@data$hourly_wage
} else{
bins <-  c(1000,5000,10000,20000,30000,40000,50000,65000)
pal <- colorBin(palette = "RdPu", domain = states@data$hourly_wage, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g employees",
states@data$NAME, states@data$total_employee
) %>% lapply(htmltools::HTML)
map_title <- "Average Total Employees (2017)"
map_value <- states@data$total_employee
}
#Map of the US
leaflet(states) %>%
addTiles() %>%
setView(-97,39, zoom = 3) %>%
addPolygons(fillColor = ~pal(map_value), weight = 1, dashArray = "3", color = "black", fillOpacity = 2,
highlight = highlightOptions(weight = 5, color = "#999", dashArray = "", fillOpacity = 0.7,bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),textsize = "15px",direction = "auto")
)%>%  addLegend(pal = pal, title = map_title, values = map_value, position = "bottomleft", opacity = 2)
})
output$plot <- renderPlot({
user_state <- state_df %>% filter(OCC_GROUP == input$plot_occ) %>%
filter(STATE == input$plot_state | ST == input$plot_state)
#Arranges the rows according the user's chosen value
if(input$plot_value == "A_MEAN"){
user_state <- arrange(user_state, A_MEAN)
y_title <- "Salary (USD)"
} else if(input$plot_value == "H_MEAN"){
user_state <- arrange(user_state, H_MEAN)
y_title <- "Hourly Wage (USD)"
} else {
user_state <- arrange(user_state, TOT_EMP)
y_title <- "Total Number of Employees"
}
user_state <- head(user_state, 5)
ggplot(data = user_state) +
geom_col(mapping = aes_string(
x = "OCC_TITLE",
y = input$plot_value
), fill = "blue") + labs(
title = paste("Top 5 Occupations with the Lowest", y_title, "in", user_state$STATE),
x = "Occupation",
y = y_title
) + theme(
legend.justification = c("left", "top"),
axis.text.x = element_text(face="bold",
size=10, angle=90),
axis.text.y = element_text(face="bold",
size=10)
)
})
}
library(shiny)
kelly_ui <- fluidPage(
titlePanel("Sandbox"),
tabsetPanel(type = 'tabs',
tabPanel(
"Map",
hr("Highlight over a state to reveal more stats"),
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "map_value", label = "Map by:", selected = "gdp",
choices = c("GDP" = "gdp", "Hourly wage" = "wage", "Total employees" = "total"))
),
mainPanel(
leafletOutput("map")))
),
tabPanel("Lowest 5 Occupations",
titlePanel("Bottom 5 Occupations"),
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "plot_occ", label = "Select Occupation",
c("Occupation Field" = "major","Occupation" = "detailed")),
selectInput(inputId = "plot_value", label = "Choose topic:",
choices = c("Total Employees" = "TOT_EMP", "Hourly Wage Mean" = "H_MEAN", "Annual Salary Mean" = "A_MEAN")),
textInput(inputId = "plot_state", label = "Enter a State")
),
mainPanel(
plotOutput("plot")
)
))
)
)
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
states <- geojson_read("dataset/us-states.json", what = "sp")
gdp_2017  = read_xlsx("dataset/qgdpstate0219.xlsx")
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx")
#Temporaily rename columns
colnames(gdp_2017) <- letters[1:10]
#Takes the rows that are states
#Takes the first two columns and renames to state and gdp_2017
gdp <- gdp_2017[gdp_2017$a %in% state.name,] %>% select(a,b) %>%
rename("state" = a,"gdp_2017" = b)
#Adds in District of Columbia and Puerto Rico rows to the gdp dataframe
left_over <- data.frame(state = c("District of Columnbia","Puerto Rico"), gdp_2017 = c(0,0))
gdp = rbind(gdp,left_over)
state_df[7:23] <- lapply(state_df[7:23], as.numeric)
states_summarized <- state_df %>%
group_by(STATE) %>% summarize(
avg_hour_wage = round(mean(H_MEAN, na.rm = TRUE), 2),
avg_total_employee = round(sum(TOT_EMP, na.rm = TRUE), 2)
) %>%
filter(STATE !=  "Guam" & STATE != "Virgin Islands")
#Creates levels to match with the states json
levels = states$NAME
rearranged_states_summarized <- as.data.frame(states_summarized %>% mutate(
state = factor(STATE, levels = levels)) %>%
arrange(state))
rearranged_gdp <- as.data.frame(gdp %>% mutate(
state = factor(state, levels = levels)) %>%
arrange(state)
)
min(states_summarized$avg_total_employee)
max(states_summarized$avg_total_employee)
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
user_state <- state_df %>%
filter("major" == OCC_GROUP) %>%
select(STATE, OCC_TITLE , TOT_EMP) %>% arrange(desc(H_MEAN))
user_state <- state_df %>%
filter("major" == OCC_GROUP) %>%
select(STATE, OCC_TITLE , TOT_EMP) %>% arrange(desc(TOT_EMP))
View(user_state)
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
state_df <- state_df %>% na.omit()
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx")
View(rearranged_states_summarized)
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx")
View(state_df)
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx")
View(state_df)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
View(state_df)
View(state_df)
View(rearranged_states_summarized)
View(state_df)
WA = state_df %>% filter(ST == "WA")
View(WA)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
gdp_2017  = read_xlsx("dataset/qgdpstate0219.xlsx")
View(gdp_2017)
View(gdp)
runApp('kelly_app.R')
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
runApp('kelly_app.R')
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
runApp('kelly_app.R')
View(states)
View(state_df)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
View(state_df)
View(state_df)
state_df <- read_xlsx("dataset/state_M2017_dl.xlsx") %>% select(STATE, OCC_TITLE, OCC_GROUP, A_MEAN, H_MEAN, TOT_EMP)
View(state_df)
runApp('kelly_app.R')
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
library(shiny)
source("kelly_ui.R")
source("kelly_server.R")
shinyApp(ui = kelly_ui, server = kelly_server)
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
runApp('kelly_app.R')
